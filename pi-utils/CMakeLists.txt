cmake_minimum_required(VERSION 3.12)

#project name
project(pi-utils)

#unset(CMAKE_C_IMPLICIT_INCLUDE_DIRECTORIES)
#unset(CMAKE_CXX_IMPLICIT_INCLUDE_DIRECTORIES)

include_directories(AFTER
    ${CJSON}
)

get_directory_property (INC_DIRS INCLUDE_DIRECTORIES)
message( STATUS "INCLUDE_DIRECTORIES: ${PROJECT_NAME} ${INC_DIRS}")

#set(CMAKE_REQUIRED_INCLUDES ${CMAKE_REQUIRED_INCLUDES} /usr/include)
#message( STATUS "CMAKE_REQUIRED_INCLUDES: ${PROJECT_NAME} ${CMAKE_REQUIRED_INCLUDES}")

aux_source_directory(${PROJECT_SOURCE_DIR} PI_UTILS_SOURCES)

add_library(pi-utils SHARED ${PI_UTILS_SOURCES} ${CJSON}/cJSON.c)
add_library(PiRobot::pi-utils ALIAS pi-utils)

if(MAKE_STATIC_LIB)
add_library(pi-utils-dev STATIC ${PI_UTILS_SOURCES} ${CJSON}/cJSON.c)
endif(MAKE_STATIC_LIB)

if(MAKE_DEV_LIB)
add_library(PiRobotStatic::pi-utils-dev ALIAS pi-utils-dev)
endif(MAKE_DEV_LIB)

install(TARGETS ${PROJECT_NAME}
    EXPORT ${PROJECT_NAME}-t
    LIBRARY DESTINATION lib
    ARCHIVE DESTINATION lib
    )

set_property(TARGET ${PROJECT_NAME} PROPERTY IMPORTED_LOCATION "${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/lib${PROJECT_NAME}.so")
set_property(TARGET ${PROJECT_NAME} PROPERTY VERSION ${PI_VER})
set_property(TARGET ${PROJECT_NAME} PROPERTY SVERSION ${PI_VER})
