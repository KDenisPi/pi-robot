cmake_minimum_required(VERSION 3.0)

#project name
project(weather VERSION 0.9.5)

set(DAEMON ${PROJECT_NAME}d)

message( STATUS "REAL_HARDWARE:  ${REAL_HARDWARE}" )
IF(REAL_HARDWARE)
    set(THIRD_PARTY_HOME "${CMAKE_SOURCE_DIR}/../../third-party")
ELSE(REAL_HARDWARE)
    set(THIRD_PARTY_HOME "$ENV{HOME}/third-party")
ENDIF(REAL_HARDWARE)

message( STATUS "THIRD_PARTY_HOME: ${THIRD_PARTY_HOME}")

set(JSONCONS "${THIRD_PARTY_HOME}/jsoncons/include")
set(MONGOOSE_HOME "${THIRD_PARTY_HOME}/mongoose-5.1")

message( STATUS "THIRD_PARTY_HOME ${THIRD_PARTY_HOME}")
message( STATUS "JSONCONS ${JSONCONS}")
message( STATUS "MONGOOSE_HOME ${MONGOOSE_HOME}")
message( STATUS "CMAKE_BIULD_TYPE is ${CMAKE_BIULD_TYPE}")

add_library(libmosquitto SHARED IMPORTED)

#
# C++ 11
#
IF(CMAKE_BUILD_TYPE STREQUAL "Debug")
    message("debug mode")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${CMAKE_C_FLAGS_DEBUG} -g -std=c++11 -fexceptions -Wno-psabi -Og")
ELSE(CMAKE_BUILD_TYPE NOT STREQUAL "Debug")
    message("release with debug info mode")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${CMAKE_C_FLAGS_RELWITHDEBINFO} -std=c++11 -fexceptions -Wno-psabi")
ENDIF(CMAKE_BUILD_TYPE STREQUAL "Debug")

set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

message( STATUS "CMAKE_C_FLAGS_RELWITHDEBINFO is ${CMAKE_C_FLAGS_RELWITHDEBINFO}")
message( STATUS "CMAKE_C_FLAGS_DEBUG is ${CMAKE_C_FLAGS_DEBUG}")

message( STATUS "GCC is ${CMAKE_CXX_COMPILER_VERSION}")
message( STATUS "CMAKE_CXX_FLAGS:  ${CMAKE_CXX_FLAGS}" )


set(EXTRA_LIBS ${EXTRA_LIBS} pi-utils pi-sql pi-library pi-smachine pi-mqtt pi-http mosquitto pthread dl curl rt)
link_directories("${PROJECT_SOURCE_DIR}/../build")

include_directories(BEFORE
    ${PROJECT_SOURCE_DIR}/../pi-utils
    ${PROJECT_SOURCE_DIR}/../pi-main
    ${PROJECT_SOURCE_DIR}/../pi-sql
    ${PROJECT_SOURCE_DIR}/../pi-library
    ${PROJECT_SOURCE_DIR}/../pi-smachine
    ${PROJECT_SOURCE_DIR}/../pi-mqtt
    ${PROJECT_SOURCE_DIR}/../pi-http
    ${PROJECT_SOURCE_DIR}/../pi-data
    ${MONGOOSE_HOME}
    ${JSONCONS}
    ${SQLITE3_HOME}
)

message( STATUS "EXTRA_LIBS (proj):  ${EXTRA_LIBS}" )
message( STATUS "[${PROJECT_VERSION}]" )

aux_source_directory(${PROJECT_SOURCE_DIR} WEATHER_SOURCES)

add_executable(${DAEMON} ${WEATHER_SOURCES})
target_link_libraries(${DAEMON} ${EXTRA_LIBS} crypt)
set_property(TARGET ${DAEMON} PROPERTY VERSION ${PROJECT_VERSION})
set_property(TARGET ${DAEMON} PROPERTY SVERSION ${PROJECT_VERSION})

configure_file(version.h.in ${PROJECT_SOURCE_DIR}/version.h)

#
# Installation
#
#
# package section
#
set(PROJECT_VENDOR "Denis Kudia")

set(CPACK_PROJECT_NAME ${PROJECT_NAME})
set(CPACK_PROJECT_VERSION ${PROJECT_VERSION})

# Generator name - Debian packages
set(CPACK_GENERATOR "DEB")
set(CPACK_PACKAGE_NAME ${PROJECT_NAME})

set(CPACK_DEBIAN_PACKAGE_DEPENDS "mosquitto (>= 1.6.8), libpi-robot (>=1.1.0)")

# package information
set(CPACK_PACKAGE_VENDOR ${PROJECT_VENDOR})
set(CPACK_PACKAGE_CONTACT ${PROJECT_VENDOR})
set(CPACK_PACKAGE_DESCRIPTION_SUMMARY "Weather. Pi-Robot library based project")
set(CPACK_DEBIAN_PACKAGE_MAINTAINER ${CPACK_PACKAGE_CONTACT})

# package version
set(CPACK_PACKAGE_VERSION ${PROJECT_VERSION})
set(CPACK_PACKAGE_VERSION_MAJOR ${PROJECT_VERSION_MAJOR})
set(CPACK_PACKAGE_VERSION_MINOR ${PROJECT_VERSION_MINOR})
set(CPACK_PACKAGE_VERSION_PATCH ${PROJECT_VERSION_PATCH})

IF(${CMAKE_SYSTEM_PROCESSOR} MATCHES "x86_64")
    set(CPACK_DEBIAN_PACKAGE_ARCHITECTURE "amd64")
ELSE(${CMAKE_SYSTEM_PROCESSOR} MATCHES "x86_64")
    set(CPACK_DEBIAN_PACKAGE_ARCHITECTURE "armhf")
ENDIF(${CMAKE_SYSTEM_PROCESSOR} MATCHES "x86_64")
set(CPACK_SYSTEM_NAME ${CMAKE_SYSTEM_NAME})
set(CPACK_PACKAGE_FILE_NAME ${CPACK_PACKAGE_NAME}-${CPACK_PACKAGE_VERSION}-${CPACK_SYSTEM_NAME}-${CPACK_DEBIAN_PACKAGE_ARCHITECTURE})

#
# Daemon file
#
install(TARGETS ${DAEMON} DESTINATION ${CMAKE_INSTALL_PREFIX}/bin)

#configuration file
install(FILES ${PROJECT_SOURCE_DIR}/../conf/Weather.json
    DESTINATION ${CMAKE_INSTALL_PREFIX}/etc/weather
    RENAME Weather.json
    PERMISSIONS
        OWNER_EXECUTE OWNER_WRITE OWNER_READ
        GROUP_EXECUTE GROUP_READ
        WORLD_EXECUTE WORLD_READ
    )

#daemon configuration file
install(FILES ${PROJECT_SOURCE_DIR}/daemon/weather
    DESTINATION /etc/init.d/
    PERMISSIONS
        OWNER_EXECUTE OWNER_WRITE OWNER_READ
        GROUP_EXECUTE GROUP_READ
        WORLD_EXECUTE WORLD_READ
    )

#create log folder
install(DIRECTORY DESTINATION /var/log/pi-robot
    DIRECTORY_PERMISSIONS
        OWNER_EXECUTE OWNER_WRITE OWNER_READ
        GROUP_EXECUTE GROUP_WRITE GROUP_READ
        WORLD_EXECUTE WORLD_WRITE WORLD_READ
    )

#create data folder
install(DIRECTORY DESTINATION /var/data/pi-robot/data
    DIRECTORY_PERMISSIONS
        OWNER_EXECUTE OWNER_WRITE OWNER_READ
        GROUP_EXECUTE GROUP_WRITE GROUP_READ
        WORLD_EXECUTE WORLD_WRITE WORLD_READ
    )

include(CPack)
