{
    "version": "1.0", //Optional, for future using

    //
    // Flag if this configuration should be used with real hardware or with emulator
    // Possible values: true - hardware, false - emulator
    "real_world": "true",

    //
    // List of providers used for the project.
    // We have two types of providers here: GPIO (all from the list below except SPI), SPI
    //
    // Note: SIMPLE provider is added always by default if real_world is true
    //       For emulator we cannot use any providers instead of FAKE or SPI
    // 
    // Attributes:
    //
    // Optional
    // name - if name is not set the type name will be used but on this case you cannot have more than one provider each type
    //
    // GPIO only:
    // pins - pin count (pins)
    //        Each GPIO provider has number pins by default (FAKE=16, SIMPLE=12, MCP23017=16, PCA9585=16)
    //
    // SPI only
    // channels - number of available SPI channels (1 or 2). Default 1
    // speed - speed in Hz for each channel, Default value 1MHz
    // mode  - channel mode. Possible values (0,1,2,3). Default value 0
    //
    // Note: Two GPIO allocated on board (SIMPLE) with numbers 10, 11 allocated for SPI and cannot beused for another purposes
   
    "providers": [
        //{"type": "SIMPLE", "pins": 12},
        {"type": "FAKE", "name": "FAKE", "pins": 16}, 
        {"type": "PWM", "name": "AdafruitPWM", "i2c_addr" : 64},//0x40
        {"type": "MCP23017", "name": "MCP23017_1", "i2c_addr" : 32}, //0x20 
        {"type": "PCA9685", "name":"PCA9685", "pwm": "AdafruitPWM", "frequency": 60.0},  

        {"type": "SPI", "channels": 1, "speed_1": 1000000, "speed_2": 500000, "mode_1": 0, "mode_2": 0}
    ],

    //
    // GPIOs 
    // name - optional. If name is not defined than provider_name_pin will be used
    // mode - GPIO mode can be "IN" or "OUT"
    // provider - provider is "name" attribute for provider object defined above
    //
    "gpios": [{"name": "gpio_name", "provider": "provider_name", "pin": 0, "mode": "IN/OUT"}],
    
    //
    // Items (all elements another then providers, and gpios)
    //
    // Note: GPIO can be defined or using {proveder, pin} pair or usind GPIO name {name}
    //
    "items":[
        //
        // LED
        //
        {
            "type":"LED", 
            "name":"item_name", 
            "comment": "", 
            "gpio": {"provider": "provider_name", "pin": 0}
        },

        //
        // Button
        //
        {
            "type":"BUTTON",
            "name":"item_name",
            "comment":"",
            "state":"PUSHED/NOT_PUSHED", //optional - NOT_PUSHED by default
            "pull_mode": "PULL_UP/PULL_DOWN", //optional - PULL_UP by default
            "gpio": {"provider": "provider_name", "pin":0}
        },

        //
        // DRV 8835
        //
        {
            "type":"DRV8835", 
            "name":"item_name", 
            "comment": "",
            "mode":"IN_IN/PH_EN", //mode (see above), optional PH_EN by default
            "gpio": {"provider": "provider_name", "pin": 0}
        },

        //
        // DC Motor
        //
        {
            "type":"DCMotor", 
            "name":"item_name", 
            "comment": "", 
            "drv8835": "drv8835_name",
            "gpio": {"provider": "provider_name", "pin": 0}, //Direction control
            "gpio_pwm": {"provider": "provider_name", "pin": 0},
            "direction": "CLOCKWISE/COUTERCLOCKWISE"
        },

        //
        // Stepper over ULN2003 (ULN2003Stepper)
        //
        {
            "type":"ULN2003Stepper", 
            "name":"item_name", 
            "comment": "",
            "gpio_phase_0": {"provider": "provider_name", "pin": 0},
            "gpio_phase_1": {"provider": "provider_name", "pin": 0},
            "gpio_phase_2": {"provider": "provider_name", "pin": 0},
            "gpio_phase_3": {"provider": "provider_name", "pin": 0},
            "direction": "CLOCKWISE/COUTERCLOCKWISE" //optional CLOCKWISE by default
        },

        //
        // AnlgDgtConvertor based on MCP320X (AC/DC converter)
        // 
        {
            "type": "AnlgDgtConvertor",
            "name":"item_name",
            "comment":"",
            "gpio":{"provider": "provider_name", "pin": 0}, //GPIO is used for switch ON/OFF (CS/SHDN) Low - On, High - Off
            "analog_inputs":8, // number of analog inputs usually 8/4 depends on chip
            "spi_channel":0, // possible values 0/1
            "delay": 5
        },

        //
        // Blinker based on LED
        //
        {
            "type":"BLINKER", 
            "name":"item_name", 
            "comment": "",
            "led": "LED_item_name",
            "tm_on": 250, //time on interval in milliseconds
            "tm_off": 500, //time off interval in milliseconds
            "blinks": 10 //blinks number, 0 - infinitely, never stop
        },

        //
        // Analog Light Meter
        //
        {
            "type": "AnalogLightMeter", 
            "name": "item_name", 
            "comment": "", //optional
            "ad_convertor": "AnlgDgtConvertor_name",
            "analog_input_index": 0, //Pin index
            "debug": false, //Debug mode true/false, false by default, optional
            "debug_buffer_size": 2048, //size of debug buffer, optional
            "value_diff_for_event" : 20 // Difference in measures that generate event, optional
        },

        //
        // MPU 6050
        //
        {
            "type": "MPU6050",
            "name": "item_name",
            "comment": "", //optional
            "i2c_addr": 104, //0x68
            "delay": 100
        },
        //
        // Si7021 
        // I2C Humidity and Temperature Sensor
        //
        {
            "type": "SI7021",
            "name": "item_name",
            "comment": "" //optional
        },
        //
        // SGP30 
        // I2C Sensirion Gas Platform (CO2, TVOC)
        //
        {
            "type": "SGP30",
            "name": "item_name",
            "comment": "" //optional
        },
        //
        // BMP280 
        // I2C Digital Pressure Sensor
        //
        {
            "type": "BMP280",
            "name": "item_name",
            "i2c_addr": 118, //0x76 (118), 0x77 (119)
            "mode": "FORCED", //NORMAL, SLEEP, FORCED
            "pressure_oversampling": 1, //0,1,2,3,4,5 default 1
            "temperature_oversampling": 1, //0,1,2,3,4,5 default 1, can be detected using pressure value
            "standby_time": 5, //0-8
            "filter": 0, //0,2,4,8,16 - used for NORMAL mode only
            "SPI": 0, //SPI mode ON-1, OFF-0 default OFF (0)
            "spi_channel": 0,
            "comment": "" //optional
        }        
    ]
}